{"status":"ok","sql":"DROP TABLE IF EXISTS `{tableprefix}accounts`;
CREATE TABLE `{tableprefix}accounts` (
  `id` int(11) NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `driver` varchar(50) CHARACTER SET utf8 DEFAULT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `profile_id` varchar(100) CHARACTER SET utf8 DEFAULT NULL,
  `email` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `username` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `profile_pic` varchar(500) CHARACTER SET utf8 DEFAULT NULL,
  `options` text COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `proxy` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `is_public` tinyint(4) DEFAULT NULL,
  `blog_id` int(11) DEFAULT NULL,
  `status` varchar(15) CHARACTER SET utf8 DEFAULT NULL,
  `error_msg` varchar(500) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `last_check_time` timestamp NULL DEFAULT NULL
) CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPACT;

DROP TABLE IF EXISTS `{tableprefix}account_access_tokens`;
CREATE TABLE `{tableprefix}account_access_tokens` (
  `id` int(11) NOT NULL,
  `account_id` int(11) DEFAULT NULL,
  `app_id` int(11) DEFAULT NULL,
  `expires_on` timestamp NULL DEFAULT NULL,
  `access_token` varchar(2500) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `access_token_secret` varchar(750) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `refresh_token` varchar(1000) COLLATE utf8mb4_unicode_ci DEFAULT NULL
) CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPACT;

DROP TABLE IF EXISTS `{tableprefix}account_nodes`;
CREATE TABLE `{tableprefix}account_nodes` (
  `id` int(11) NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `account_id` int(11) DEFAULT NULL,
  `node_type` varchar(20) CHARACTER SET utf8 DEFAULT NULL,
  `node_id` varchar(30) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `access_token` varchar(1000) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `name` varchar(350) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `added_date` timestamp NULL DEFAULT current_timestamp(),
  `category` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `cover` varchar(750) CHARACTER SET utf8 DEFAULT NULL,
  `driver` varchar(50) CHARACTER SET utf8 DEFAULT NULL,
  `screen_name` varchar(350) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `is_public` tinyint(4) DEFAULT NULL,
  `blog_id` int(11) DEFAULT NULL,
  `error_msg` varchar(500) COLLATE utf8mb4_unicode_ci DEFAULT NULL
) CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPACT;

DROP TABLE IF EXISTS `{tableprefix}account_node_status`;
CREATE TABLE `{tableprefix}account_node_status` (
  `id` int(11) NOT NULL,
  `node_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `categories` varchar(500) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `filter_type` varchar(2) COLLATE utf8mb4_unicode_ci DEFAULT NULL
) CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPACT;

DROP TABLE IF EXISTS `{tableprefix}account_sessions`;
CREATE TABLE `{tableprefix}account_sessions` (
  `id` int(11) NOT NULL,
  `driver` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `username` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `settings` text COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `cookies` text COLLATE utf8mb4_unicode_ci DEFAULT NULL
) CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPACT;

DROP TABLE IF EXISTS `{tableprefix}account_status`;
CREATE TABLE `{tableprefix}account_status` (
  `id` int(11) NOT NULL,
  `account_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `categories` varchar(500) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `filter_type` varchar(2) COLLATE utf8mb4_unicode_ci DEFAULT NULL
) CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPACT;

DROP TABLE IF EXISTS `{tableprefix}apps`;
CREATE TABLE `{tableprefix}apps` (
  `id` int(11) NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `driver` varchar(50) CHARACTER SET utf8 DEFAULT NULL,
  `app_id` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `app_secret` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `app_key` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `app_authenticate_link` varchar(2000) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `is_public` tinyint(1) DEFAULT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `is_standart` tinyint(1) DEFAULT 0,
  `version` int(11) DEFAULT NULL
) CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPACT;

DROP TABLE IF EXISTS `{tableprefix}feeds`;
CREATE TABLE `{tableprefix}feeds` (
  `id` int(11) NOT NULL,
  `post_id` bigint(20) DEFAULT NULL,
  `node_id` int(11) DEFAULT NULL,
  `node_type` varchar(40) CHARACTER SET utf8 DEFAULT NULL,
  `driver` varchar(50) CHARACTER SET utf8 DEFAULT NULL,
  `is_sended` tinyint(1) DEFAULT 0,
  `status` varchar(15) CHARACTER SET utf8 DEFAULT NULL,
  `error_msg` varchar(300) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `send_time` timestamp NULL DEFAULT current_timestamp(),
  `interval` int(11) DEFAULT NULL,
  `driver_post_id` varchar(45) CHARACTER SET utf8 DEFAULT NULL,
  `visit_count` int(11) DEFAULT 0,
  `feed_type` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `schedule_id` int(11) DEFAULT NULL,
  `driver_post_id2` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `custom_post_message` text COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `share_on_background` tinyint(1) DEFAULT NULL,
  `blog_id` int(11) DEFAULT NULL,
  `is_seen` tinyint(1) DEFAULT NULL
) CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPACT;

DROP TABLE IF EXISTS `{tableprefix}schedules`;
CREATE TABLE `{tableprefix}schedules` (
  `id` int(11) NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `start_date` date DEFAULT NULL,
  `end_date` date DEFAULT NULL,
  `interval` int(11) DEFAULT NULL,
  `status` varchar(50) CHARACTER SET utf8 DEFAULT NULL,
  `insert_date` timestamp NULL DEFAULT current_timestamp(),
  `share_time` time DEFAULT NULL,
  `post_type_filter` varchar(750) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `category_filter` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `post_sort` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `post_date_filter` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `post_ids` varchar(1000) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `next_execute_time` timestamp NULL DEFAULT NULL,
  `custom_post_message` text COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `share_on_accounts` varchar(2000) CHARACTER SET utf8 DEFAULT NULL,
  `sleep_time_start` time DEFAULT NULL,
  `sleep_time_end` time DEFAULT NULL,
  `save_post_ids` varchar(1000) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `blog_id` int(11) DEFAULT NULL,
  `dont_post_out_of_stock_products` tinyint(1) DEFAULT NULL
) CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPACT;

ALTER TABLE `{tableprefix}accounts` ADD PRIMARY KEY (`id`) USING BTREE;
ALTER TABLE `{tableprefix}account_access_tokens` ADD PRIMARY KEY (`id`) USING BTREE;
ALTER TABLE `{tableprefix}account_nodes` ADD PRIMARY KEY (`id`) USING BTREE;
ALTER TABLE `{tableprefix}account_node_status` ADD PRIMARY KEY (`id`);
ALTER TABLE `{tableprefix}account_sessions` ADD PRIMARY KEY (`id`);
ALTER TABLE `{tableprefix}account_status` ADD PRIMARY KEY (`id`);
ALTER TABLE `{tableprefix}apps` ADD PRIMARY KEY (`id`) USING BTREE;
ALTER TABLE `{tableprefix}feeds` ADD PRIMARY KEY (`id`) USING BTREE;
ALTER TABLE `{tableprefix}schedules` ADD PRIMARY KEY (`id`) USING BTREE;
ALTER TABLE `{tableprefix}accounts` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `{tableprefix}account_access_tokens` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `{tableprefix}account_nodes` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `{tableprefix}account_node_status` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `{tableprefix}account_sessions` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `{tableprefix}account_status` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `{tableprefix}apps` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=16;
ALTER TABLE `{tableprefix}feeds` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `{tableprefix}schedules` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

INSERT INTO `{tableprefix}apps` (`id`, `user_id`, `driver`, `app_id`, `app_secret`, `app_key`, `app_authenticate_link`, `is_public`, `name`, `is_standart`) VALUES
(7, NULL, 'linkedin', '869d0k0dnz6ani', 'svD9SSMgoR0N4r7G', NULL, NULL, NULL, 'FS Poster - Standard APP', 1),
(8, NULL, 'vk', '6602634', 'wa2ijHeZn4jop4lpCiG7', NULL, NULL, NULL, 'FS Poster - Standard APP', 1),
(10, NULL, 'reddit', 'wlYovB5vGbWY_w', '6iKVNyKe3KzKb2hmKvMnMOeqcmQ', NULL, NULL, NULL, 'FS Poster - Standard APP', 1),
(11, NULL, 'tumblr', '', 'Y1Sr7JPq32AOmdlz4cszwCLF1D6cUlNGpslzWnGLytLBBL2cIs', 'dEVlT3wWicbBZM6fyAmkr43Drv705bk1ULeIE8kFDfSilOoHMG', NULL, NULL, 'FS Poster - Standard APP', 1),
(12, NULL, 'ok', '1273143296', 'C7EF9DCAD2588B99720C8E5E', 'CBABKDOMEBABABABA', NULL, NULL, 'FS Poster - Standard APP', 1),
(13, NULL, 'fb', '1603323203130063', NULL, '*****', NULL, NULL, 'FS Poster - Standard APP', 1),
(14, NULL, 'twitter', NULL, 'xq5nJ2gkJFUdro8zAWPlbOOMPvCGL7Oue7bKyPFvPEk1BozHZe', 'l0fOqMTgEtO9UZcHHVBxjBzCN', NULL, NULL, 'FS Poster - Standard APP', 1),
(15, NULL, 'medium', 'e5e8456ee459', '7a940974bbbcba6cc32e64e2c1671e2da2cc4e21', '', NULL, NULL, 'FS Poster - Standard APP', 1);
ALTER TABLE `{tableprefix}schedules` ADD COLUMN `post_freq` varchar(10) COLLATE utf8_general_ci DEFAULT NULL;

ALTER TABLE `{tableprefix}accounts` MODIFY COLUMN `error_msg` text;
ALTER TABLE `{tableprefix}accounts` MODIFY COLUMN `profile_pic` text;
ALTER TABLE `{tableprefix}schedules` MODIFY COLUMN `post_ids` varchar(2000) COLLATE utf8_general_ci;
ALTER TABLE `{tableprefix}schedules` MODIFY COLUMN `save_post_ids` varchar(2000) COLLATE utf8_general_ci;
ALTER TABLE `{tableprefix}account_nodes` MODIFY COLUMN `node_id` varchar(50) COLLATE utf8_general_ci;ALTER TABLE `{tableprefix}account_nodes` ADD COLUMN `poster_id` varchar(50) COLLATE utf8_general_ci DEFAULT NULL;

DROP TABLE IF EXISTS `{tableprefix}grouped_accounts`;
CREATE TABLE `{tableprefix}grouped_accounts` (
  `id` int(11) NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `account_id` int(11) DEFAULT NULL,
  `account_type` varchar(10) COLLATE utf8_general_ci DEFAULT NULL,
  `group_id` int(11) DEFAULT NULL
) CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPACT;

ALTER TABLE `{tableprefix}grouped_accounts` ADD PRIMARY KEY (`id`) USING BTREE;
ALTER TABLE `{tableprefix}grouped_accounts` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

INSERT INTO `{tableprefix}apps` (user_id, driver, app_id, app_secret, app_key, app_authenticate_link, is_public, name, is_standart, version) VALUES
(NULL, 'google_b', '222589829642-kuijngfr9j6n9vkq0dt7g9uch5i7ll7e.apps.googleusercontent.com', 'znxzmdDXZI-hk3ADr9ijnZf3', NULL, NULL, NULL, 'FS Poster - Standard APP', 1, NULL);

ALTER TABLE `{tableprefix}account_nodes` MODIFY COLUMN `node_id` varchar(100) COLLATE utf8_general_ci;
ALTER TABLE `{tableprefix}accounts` DROP COLUMN `last_check_time`;
ALTER TABLE `{tableprefix}schedules` MODIFY COLUMN `share_on_accounts` text;
ALTER TABLE `{tableprefix}schedules` ADD `filter_posts_date_range_from` DATE NULL DEFAULT NULL AFTER `share_time`,
ADD `filter_posts_date_range_to` DATE NULL DEFAULT NULL AFTER `filter_posts_date_range_from`;"}